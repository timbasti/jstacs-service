plugins {
	id "com.github.ben-manes.versions" version '0.43.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.springframework.boot' version '2.7.5'
	id "io.freefair.lombok" version "6.5.1"
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
	id 'war'
	id 'com.avast.gradle.docker-compose' version "0.16.9"
}

group = 'de.jstacs'
version = '1.0.0'
sourceCompatibility = '11'

dockerCompose.isRequiredBy(bootRun)

bootJar {     
   	archiveBaseName = 'app'
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

bootBuildImage {
	imageName = "jstacs.de/${project.name}:${project.version}"
	docker {
		publishRegistry {
			username = "$System.env.REGISTRY_USERNAME"
			password = "$System.env.REGISTRY_TOKEN"
			url = "$System.env.REGISTRY_URL"
		}
	}
	builder = "paketobuildpacks/builder:tiny"
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	asciidoctorExtensions
}

dependencies {
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	developmentOnly 'io.zonky.test:embedded-database-spring-test:2.1.2'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'com.cedarsoftware:json-io:4.14.0'
	implementation 'com.google.guava:guava:31.1-jre'
   	implementation 'org.apache.tika:tika-core:2.5.0'
	implementation 'org.reflections:reflections:0.10.2'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.vladmihalcea:hibernate-types-52:2.20.0'
	implementation 'commons-logging:commons-logging:1.0.4'
	implementation fileTree('lib') {include '*.jar'}
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	runtimeOnly 'org.postgresql:postgresql'
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	configurations 'asciidoctorExtensions'
	sourceDir  file('src/docs')
	outputDir  file('build/docs')
	dependsOn test
}

task createProperties(dependsOn: processResources) {
	doLast {
		new File("$buildDir/resources/main/service.properties").withWriter { w ->
			Properties p = new Properties()
			p['version'] = project.version.toString()
			p['name'] = project.name.toString()
			p.store w, null
		}
	}
}

classes {
	dependsOn createProperties
}

// To deploy on heroku
task stage(type: Copy, dependsOn: [clean, bootJar]) {
	from bootJar.archivePath
	into project.rootDir 
	mustRunAfter clean
}

clean {
	doLast {
		project.file('app.jar').delete()
	}
}
