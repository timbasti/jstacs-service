plugins {
    id "com.github.ben-manes.versions" version '0.38.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.springframework.boot' version '2.4.5'
    id "io.freefair.lombok" version "5.3.0"
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
	id 'war'
}

group = 'de.jstacs'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
    asciidoctorExtensions
}

dependencies {
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'com.cedarsoftware:json-io:4.12.0'
	implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.apache.tika:tika-core:1.25'
	implementation 'org.reflections:reflections:0.9.12'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation fileTree('lib') {include '*.jar'}
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
    configurations 'asciidoctorExtensions'
	sourceDir  file('src/docs')
	outputDir  file('build/docs')
	dependsOn test
}

task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/service.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
		p['name'] = project.name.toString()
        p.store w, null
    }
  }
}

classes {
    dependsOn createProperties
}

// To deploy on heroku
task stage(type: Copy, dependsOn: [clean, bootJar]) {
    from jar.archivePath
    into project.rootDir 
    rename {
        'app.jar'
    }
    mustRunAfter clean
}

clean {
    doLast {
        project.file('app.jar').delete()
    }
}
